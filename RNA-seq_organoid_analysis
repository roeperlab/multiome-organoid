# Code used to integrate 3x batches of sc/snRNA-seq data and to generate plots and analysis for Supplemental Fig. S1

library(ggplot2)
library(scran)
library(future)
library(Signac)
library(Seurat)
library(EnhancedVolcano)
library(gridExtra)
library(cowplot)
library(dplyr)
library(patchwork)
library(RColorBrewer)

plan()
plan("sequential")
plan("multisession", workers = 1) ### Use this to parallelize

#Increasing max size to 4GB
options(future.globals.maxSize = 7000 * 1024^2)


########################################################
# Read in files #

# Batch 1

# Day 10 Batch 1
day_10.data <- Read10X(data.dir = "/Volumes/Macintosh HD/Users/jblich/Desktop/kidney_organoid_scRNAseq/day_10/filtered_feature_bc_matrix")
day_10 <- CreateSeuratObject(counts = day_10.data, min.cells = 3, min.features = 200, project = "1_day_10")
day_10[["percent.mt"]] <- PercentageFeatureSet(day_10, pattern = "^MT-")
day_10[["percent.ribo"]] <- PercentageFeatureSet(day_10, pattern = "RPL")
VlnPlot(day_10, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
day_10
day_10 <- subset(day_10, subset = nFeature_RNA > 1000  & nFeature_RNA < Inf & percent.mt < 15)
day_10
VlnPlot(day_10, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol= 3)

# Day 14 Batch 1
day_14.data <- Read10X(data.dir = "/Volumes/Macintosh HD/Users/jblich/Desktop/kidney_organoid_scRNAseq/day_14/filtered_feature_bc_matrix")
day_14 <- CreateSeuratObject(counts = day_14.data, min.cells = 3, min.features = 200, project = "1_day_14")
day_14[["percent.mt"]] <- PercentageFeatureSet(day_14, pattern = "^MT-")
day_14[["percent.ribo"]] <- PercentageFeatureSet(day_14, pattern = "RPL")
VlnPlot(day_14, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
day_14
day_14 <- subset(day_14, subset = nFeature_RNA > 2500  & nFeature_RNA < Inf & percent.mt < 15) ###Exactly the same as setting as >1000 then removing low-count cluster 5 later on (but more elegant)
day_14
VlnPlot(day_14, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol= 3)

# Day 24 Batch 1
day_24.data <- Read10X(data.dir = "/Volumes/Macintosh HD/Users/jblich/Desktop/kidney_organoid_scRNAseq/day_24/filtered_feature_bc_matrix")
day_24 <- CreateSeuratObject(counts = day_24.data, min.cells = 3, min.features = 200, project = "1_day_24")
day_24[["percent.mt"]] <- PercentageFeatureSet(day_24, pattern = "^MT-")
day_24[["percent.ribo"]] <- PercentageFeatureSet(day_24, pattern = "RPL")
VlnPlot(day_24, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
day_24
day_24 <- subset(day_24, subset = nFeature_RNA > 1000  & nFeature_RNA < Inf & percent.mt < 15)
day_24
VlnPlot(day_24, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol= 3)


# Batch 2

# Day 10 Batch 2
day_10.counts <- Read10X_h5(".../Day_10/filtered_feature_bc_matrix.h5")
day_10_multi_1 <- CreateSeuratObject(counts = day_10.counts$`Gene Expression`, assay = "RNA", project = "2_day_10")
day_10_multi_1[["percent.mt"]] <- PercentageFeatureSet(day_10_multi_1, pattern = "^MT-")
VlnPlot(object = day_10_multi_1, features = c("nFeature_RNA", "percent.mt"))
day_10_multi_1
day_10_multi_1 <- subset(x = day_10_multi_1,
                         subset = 
                           nFeature_RNA > 1000 &
                           percent.mt < 15)
day_10_multi_1
VlnPlot(object = day_10_multi_1, features = c("nFeature_RNA", "percent.mt"))

# Day 14 Batch 2
day_14.counts <- Read10X_h5(".../filtered_feature_bc_matrix.h5")
day_14_multi_1 <- CreateSeuratObject(counts = day_14.counts$`Gene Expression`, assay = "RNA", project = "2_day_14")
day_14_multi_1[["percent.mt"]] <- PercentageFeatureSet(day_14_multi_1, pattern = "^MT-")
VlnPlot(object = day_14_multi_1, features = c("nFeature_RNA", "percent.mt"))
day_14_multi_1
day_14_multi_1 <- subset(x = day_14_multi_1,
                         subset = 
                           nFeature_RNA > 1000 &
                           percent.mt < 15)
day_14_multi_1
VlnPlot(object = day_14_multi_1, features = c("nFeature_RNA", "percent.mt"))

# Day 24 Batch 2
day_24_multi_1.data <- Read10X(data.dir = ".../Day_24/filtered_feature_bc_matrix")
day_24_multi_1 <- CreateSeuratObject(counts = day_24_multi_1.data, min.cells = 3, min.features = 200, project = "2_day_24")
day_24_multi_1[["percent.mt"]] <- PercentageFeatureSet(day_24_multi_1, pattern = "^MT-")
day_24_multi_1[["percent.ribo"]] <- PercentageFeatureSet(day_24_multi_1, pattern = "RPL")
VlnPlot(day_24_multi_1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
day_24_multi_1
day_24_multi_1 <- subset(day_24_multi_1, subset = nFeature_RNA > 1000  & nFeature_RNA < Inf & percent.mt < 15)
day_24_multi_1
VlnPlot(day_24_multi_1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol= 3)


# Batch 3

# Day 10 Batch 3
day_10.counts <- Read10X_h5("/Users/jblich/Desktop/Multiome_data_batch_2/Day_10/filtered_feature_bc_matrix.h5")
day_10_multi_2 <- CreateSeuratObject(counts = day_10.counts$`Gene Expression`, assay = "RNA", project = "3_day_10")
day_10_multi_2[["percent.mt"]] <- PercentageFeatureSet(day_10_multi_2, pattern = "^MT-")
VlnPlot(object = day_10_multi_2, features = c("nFeature_RNA", "percent.mt"))
day_10_multi_2
day_10_multi_2 <- subset(x = day_10_multi_2,
                         subset = 
                           nFeature_RNA > 1000 &
                           percent.mt < 15)
day_10_multi_2
VlnPlot(object = day_10_multi_2, features = c("nFeature_RNA", "percent.mt"))

# Day 14 Batch 3
day_14.counts <- Read10X_h5("/Users/jblich/Desktop/Multiome_data_batch_2/Day_14/filtered_feature_bc_matrix.h5")
day_14_multi_2 <- CreateSeuratObject(counts = day_14.counts$`Gene Expression`, assay = "RNA", project = "3_day_14")
day_14_multi_2[["percent.mt"]] <- PercentageFeatureSet(day_14_multi_2, pattern = "^MT-")
VlnPlot(object = day_14_multi_2, features = c("nFeature_RNA", "percent.mt"))
day_14_multi_2
day_14_multi_2 <- subset(x = day_14_multi_2,
                         subset = 
                           nFeature_RNA > 1000 &
                           percent.mt < 15)
day_14_multi_2
VlnPlot(object = day_14_multi_2, features = c("nFeature_RNA", "percent.mt"))

# Day 24 Batch 3#
day_24_multi_2.data <- Read10X(data.dir = "/Volumes/Macintosh HD/Users/jblich/Desktop/Multiome_data_batch_2/Day_24/filtered_feature_bc_matrix")
day_24_multi_2 <- CreateSeuratObject(counts = day_24_multi_2.data, min.cells = 3, min.features = 200, project = "3_day_24")
day_24_multi_2[["percent.mt"]] <- PercentageFeatureSet(day_24_multi_2, pattern = "^MT-")
day_24_multi_2[["percent.ribo"]] <- PercentageFeatureSet(day_24_multi_2, pattern = "RPL")
VlnPlot(day_24_multi_2, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
day_24_multi_2
day_24_multi_2 <- subset(day_24_multi_2, subset = nFeature_RNA > 1000  & nFeature_RNA < Inf & percent.mt < 15)
day_24_multi_2
VlnPlot(day_24_multi_2, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol= 3)

# Merge datasets
day_10_14_24.seq.combined <- merge(x = day_10, y = c(day_14, day_24, day_10_multi_1, day_14_multi_1, day_24_multi_1, day_10_multi_2, day_14_multi_2, day_24_multi_2), 
                                   add.cell.ids = c("1_day_10", "1_day_14", "1_day_24", "2_day_10", "2_day_14", "2_day_24", "3_day_10", "3_day_14", "3_day_24"), 
                                   project = "day_10_14_24.combined", 
                                   merge.data = TRUE)

### Seurat batch correction
seurat_list_b1 <- SplitObject(day_10_14_24.seq.combined, split.by = "orig.ident")[1:3]
seurat_list_b2 <- SplitObject(day_10_14_24.seq.combined, split.by = "orig.ident")[4:6]
seurat_list_b3 <- SplitObject(day_10_14_24.seq.combined, split.by = "orig.ident")[7:9]
seurat_list <- c(seurat_list_b1, seurat_list_b2, seurat_list_b3)

# normalize and identify variable features for each dataset independently
seurat_list <- lapply(X = seurat_list, FUN = function(x) {
  x <- NormalizeData(x)
  x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})

# select features that are repeatedly variable across datasets for integration & run PCA on each
# dataset using these features

features <- SelectIntegrationFeatures(object.list = seurat_list)

seurat_list <- lapply(X = seurat_list, FUN = function(x) {
  x <- ScaleData(x, features = features, verbose = FALSE)
  x <- RunPCA(x, features = features, verbose = FALSE)
})

seurat_list_b1 <- seurat_list[1:3]
seurat_list_b2 <- seurat_list[4:6]
seurat_list_b3 <- seurat_list[7:9]


#rpca on 3 timepoint sample for each batch separately
anchors <- FindIntegrationAnchors(object.list = seurat_list_b1, anchor.features = features, reduction = "rpca")
combined_b1 <- IntegrateData(anchorset = anchors)
DefaultAssay(combined_b1) <- "integrated"

anchors <- FindIntegrationAnchors(object.list = seurat_list_b2, anchor.features = features, reduction = "rpca")
combined_b2 <- IntegrateData(anchorset = anchors)
DefaultAssay(combined_b2) <- "integrated"

anchors <- FindIntegrationAnchors(object.list = seurat_list_b3, anchor.features = features, reduction = "rpca")
combined_b3 <- IntegrateData(anchorset = anchors)
DefaultAssay(combined_b3) <- "integrated"


#Select integration features
seurat_list_2 <- c(combined_b1,combined_b2, combined_b3)

names(seurat_list_2) <- c("b1", "b2", "b3")

features <- SelectIntegrationFeatures(object.list = seurat_list_2)

seurat_list_2 <- lapply(X = seurat_list_2, FUN = function(x) {
  x <- ScaleData(x, features = features, verbose = FALSE)
  x <- RunPCA(x, features = features, verbose = FALSE)
})


#cca on the 3 batches
anchors <- FindIntegrationAnchors(object.list = seurat_list_2, anchor.features = features, reduction = "cca")

combined <- IntegrateData(anchorset = anchors)
DefaultAssay(combined) <- "integrated"


############################################################################################################

# Making Plots

### Make sure default assay is "integrated prior" to scaling and PCA
DefaultAssay(combined) <- "integrated"
combined <- ScaleData(combined, verbose = FALSE)
combined <- RunPCA(combined, npcs = 50, verbose = FALSE)

#Create new metadata column 'batch'
combined@meta.data[["batch"]] <- combined@meta.data$orig.ident
combined@meta.data$batch[combined@meta.data$batch=="1_day_10"] <- "Batch 1"
combined@meta.data$batch[combined@meta.data$batch=="1_day_14"] <- "Batch 1"
combined@meta.data$batch[combined@meta.data$batch=="1_day_24"] <- "Batch 1"
combined@meta.data$batch[combined@meta.data$batch=="2_day_10"] <- "Batch 2"
combined@meta.data$batch[combined@meta.data$batch=="2_day_14"] <- "Batch 2"
combined@meta.data$batch[combined@meta.data$batch=="2_day_24"] <- "Batch 2"
combined@meta.data$batch[combined@meta.data$batch=="3_day_10"] <- "Batch 3"
combined@meta.data$batch[combined@meta.data$batch=="3_day_14"] <- "Batch 3"
combined@meta.data$batch[combined@meta.data$batch=="3_day_24"] <- "Batch 3"

# Plot in Supplemental Fig. S1C
DimPlot(combined, label=F, group.by="batch",
        pt.size = 0.2,
        order = c("Batch 1", "Batch 2"))+
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1), 
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        axis.title.x=element_text(hjust = 0, vjust=2.5),
        axis.title.y=element_text(hjust = 0, vjust=-1.5),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_rect(fill = 'white', colour = 'white'),
        line = element_blank(),
        plot.title = element_blank())+labs(title = NULL,x="UMAP 1", y ="UMAP 2") + NoLegend()

# Plot in Supplemental Fig. S1D
DefaultAssay(combined) <- "RNA"
Idents(combined) <- "batch"
VlnPlot(combined, features = c("nFeature_RNA"),
        pt.size = 0)+NoLegend()+labs(title = NULL)+
  theme(panel.border = element_rect(colour = "black", fill=NA, size=NULL), 
        axis.title.x=element_blank(),
        axis.text.x = element_text(angle = 0, vjust = 0, hjust=0.5),
        axis.title.y = element_text(vjust = 3, hjust=0.5))+
  geom_boxplot(width=0.1,fill="white", outlier.size=0)+
  scale_fill_manual(values=c("#619CFF", "#00BA38", "#F8766D"))+
  labs(y = "Number of genes")

# Plot in Supplemental Fig. S1E
VlnPlot(combined, features = c("percent.mt"),
        pt.size = 0)+NoLegend()+labs(title = NULL)+
  theme(panel.border = element_rect(colour = "black", fill=NA), 
        axis.title.x = element_blank(),
        axis.title.y = element_text(vjust = 3, hjust=0.5))+
  geom_boxplot(width=0.1,fill="white", outlier.size=0)+
  scale_fill_manual(values=c("#619CFF", "#00BA38", "#F8766D"))+
  labs(y = "Mitochondrial genes (%)")


#Create new metadata column 'timepoint'
combined@meta.data[["timepoint"]] <- combined@meta.data$orig.ident
combined@meta.data$timepoint[combined@meta.data$timepoint=="1_day_10"] <- "day_10"
combined@meta.data$timepoint[combined@meta.data$timepoint=="1_day_14"] <- "day_14"
combined@meta.data$timepoint[combined@meta.data$timepoint=="1_day_24"] <- "day_24"
combined@meta.data$timepoint[combined@meta.data$timepoint=="2_day_10"] <- "day_10"
combined@meta.data$timepoint[combined@meta.data$timepoint=="2_day_14"] <- "day_14"
combined@meta.data$timepoint[combined@meta.data$timepoint=="2_day_24"] <- "day_24"
combined@meta.data$timepoint[combined@meta.data$timepoint=="3_day_10"] <- "day_10"
combined@meta.data$timepoint[combined@meta.data$timepoint=="3_day_14"] <- "day_14"
combined@meta.data$timepoint[combined@meta.data$timepoint=="3_day_24"] <- "day_24"

DefaultAssay(combined) <- "integrated"
combined <- RunUMAP(combined, reduction = "pca", dims = 1:44)
combined <- FindNeighbors(combined, reduction = "pca", dims = 1:44)
combined <- FindClusters(combined, resolution = 0.02)
DimPlot(combined, reduction = "umap", group.by = "seurat_clusters")

# Plot in Supplemental Fig. S1F
DimPlot(combined, label=T, group.by="seurat_clusters",
        pt.size = 0.5, sizes.highlight = 0.5)+
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1), 
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        axis.title.x=element_text(hjust = 0, vjust=3),
        axis.title.y=element_text(hjust = 0, vjust=-2),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_rect(fill = 'white', colour = 'white'),
        line = element_blank(),
        plot.title = element_blank())+labs(title = NULL,x="UMAP 1", y ="UMAP 2")+NoLegend()


DefaultAssay(combined) <- "RNA"
combined.markers <- FindAllMarkers(combined, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
combined.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_log2FC)
top10_combined <- combined.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)

# Heatmap in Supplemental Fig. S1G
DoHeatmap(combined, features = top10_combined$gene,
          raster = F, size = 6,
          group.by = "seurat_clusters")



# Subset epithelial cells only

combined.sub <- subset(combined, idents = "0")

DefaultAssay(combined.sub) <- "integrated"
combined.sub <- RunUMAP(combined.sub, reduction = "pca", dims = 1:28)

# Plot in Supplemental Fig. S1I
DimPlot(combined.sub, label=F, group.by="timepoint",
        pt.size = 0.2)+
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1), 
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        axis.title.x=element_text(hjust = 0, vjust=2.5),
        axis.title.y=element_text(hjust = 0, vjust=-1.5),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_rect(fill = 'white', colour = 'white'),
        line = element_blank(),
        plot.title = element_blank())+labs(title = NULL,x="UMAP 1", y ="UMAP 2")


# Plots in Supplemental Fig. S1J
DefaultAssay(combined.sub) <- "RNA" #Essential for visualisation in FeaturePlot

plot_1 <- FeaturePlot(combined.sub, features = "MAFB")+
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1), 
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        axis.title.x=element_text(hjust = 0, vjust=3),
        axis.title.y=element_text(hjust = 0, vjust=-2),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_rect(fill = 'white', colour = 'white'),
        line = element_blank(),
        legend.position = "none")+labs(title=NULL,x=NULL, y = NULL)

plot_2 <- FeaturePlot(combined.sub, features = "HNF4A")+
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1), 
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        axis.title.x=element_text(hjust = 0, vjust=3),
        axis.title.y=element_text(hjust = 0, vjust=-2),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_rect(fill = 'white', colour = 'white'),
        line = element_blank(),
        legend.position = "none")+labs(title=NULL,x=NULL, y = NULL)

plot_3 <- FeaturePlot(combined.sub, features = "TFAP2B")+
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1), 
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        axis.title.x=element_text(hjust = 0, vjust=3),
        axis.title.y=element_text(hjust = 0, vjust=-2),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_rect(fill = 'white', colour = 'white'),
        line = element_blank(),
        legend.position = "none")+labs(title=NULL,x=NULL, y = NULL)

plot_4 <- FeaturePlot(combined.sub, features = "GATA3")+
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1), 
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        axis.title.x=element_text(hjust = 0, vjust=3),
        axis.title.y=element_text(hjust = 0, vjust=-2),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_rect(fill = 'white', colour = 'white'),
        line = element_blank(),
        legend.position = "none")+labs(title=NULL,x=NULL, y = NULL)
 
# Cell cycle regression
s.genes <- cc.genes.updated.2019$s.genes
g2m.genes <- cc.genes.updated.2019$g2m.genes
combined.sub <- CellCycleScoring(combined.sub, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)

# Plot in Supplemental Fig. S1K
DimPlot(combined.sub, label=F, group.by="Phase",
        pt.size = 0.5)+
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1), 
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        axis.title.x=element_text(hjust = 0, vjust=2.5),
        axis.title.y=element_text(hjust = 0, vjust=-1.5),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_rect(fill = 'white', colour = 'white'),
        line = element_blank(),
        plot.title = element_blank())+labs(title = NULL,x="UMAP 1", y ="UMAP 2")


DefaultAssay(combined.sub) <- "integrated"
combined.sub <- FindNeighbors(combined.sub, reduction = "pca", dims = 1:28)
combined.sub <- FindClusters(combined.sub, resolution = 0.2)

# Plot in Supplemental Fig. S1L
DimPlot(combined.sub, label=T, group.by="seurat_clusters",
        pt.size = 0.5)+
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1), 
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        axis.title.x=element_text(hjust = 0, vjust=2.5),
        axis.title.y=element_text(hjust = 0, vjust=-1.5),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_rect(fill = 'white', colour = 'white'),
        line = element_blank(),
        plot.title = element_blank())+labs(title = NULL,x="UMAP 1", y ="UMAP 2")






